# Generated by Django 5.1.4 on 2025-02-06 09:22

import backend.models
import datetime
import django.contrib.auth.models
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='lib_Admin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.EmailField(max_length=254, unique=True, validators=[backend.models.validate_iitb_email])),
                ('password', models.CharField(max_length=20, validators=[django.core.validators.MinLengthValidator(8, 'the field must contain at least 8 characters')])),
                ('profile_photo', models.ImageField(default='profile_photo/default-avatar-profile-icon-social-media-user-photo-in-flat-style-vector.jpg', upload_to='profile_photo/')),
                ('Name', models.CharField(max_length=100)),
                ('DOB', models.DateField(default=datetime.date.today)),
                ('POR', models.CharField(max_length=30)),
                ('lib_Admin_no', models.CharField(max_length=10)),
                ('Address', models.CharField(max_length=500)),
                ('groups', models.ManyToManyField(related_name='lib_admin_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='lib_admin_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.EmailField(max_length=254, unique=True, validators=[backend.models.validate_iitb_email])),
                ('password', models.CharField(max_length=20, validators=[django.core.validators.MinLengthValidator(8, 'the field must contain at least 8 characters')])),
                ('profile_photo', models.ImageField(default='profile_photo/default-avatar-profile-icon-social-media-user-photo-in-flat-style-vector.jpg', upload_to='profile_photo/')),
                ('Name', models.CharField(max_length=100)),
                ('DOB', models.DateField(default=datetime.date.today)),
                ('Branch', models.CharField(max_length=30)),
                ('Roll_no', models.CharField(max_length=10)),
                ('Address', models.CharField(max_length=500)),
                ('groups', models.ManyToManyField(related_name='user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
